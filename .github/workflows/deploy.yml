name: Deploy Wojat Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Docker Hub Credentials (from GitHub Secrets)
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  
  # Server Access Credentials (from GitHub Secrets)
  HOST: ${{ secrets.SSH_HOST }}
  HOST_USERNAME: ${{ secrets.SSH_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/wojat-frontend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-frontend:buildcache,mode=max

      - name: Build and push ElizaOS Agents image
        uses: docker/build-push-action@v4
        with:
          context: ./elizaos-agents
          file: ./elizaos-agents/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/wojat-elizaos-agents:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-elizaos-agents:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-elizaos-agents:buildcache,mode=max

      - name: Build and push Bitquery Service image
        uses: docker/build-push-action@v4
        with:
          context: ./bitquery
          file: ./bitquery/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/wojat-bitquery:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-bitquery:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-bitquery:buildcache,mode=max

      - name: Build and push JS Scraper image
        uses: docker/build-push-action@v4
        with:
          context: ./js-scraper
          file: ./js-scraper/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/wojat-js-scraper:latest
          cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-js-scraper:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/wojat-js-scraper:buildcache,mode=max

      - name: Deploy to Ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "Wojat Platform Deployment started at $(date '+%Y-%m-%d %H:%M:%S UTC')"
            
            # Create wojat directory if it doesn't exist
            mkdir -p ~/wojat
            cd ~/wojat
            docker-compose down && docker-compose up -d
            
            # Create env directory if it doesn't exist
            mkdir -p ~/wojat/env
            
            # Verify environment configuration
            echo "Checking Wojat platform environment configuration..."
            
            # Get EC2 public IP for reference
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "EC2 Public IP: $PUBLIC_IP"
            
            # Check if .env file exists on server
            if [ -f "/home/ubuntu/wojat/.env" ]; then
              echo "✅ Found existing .env file on server"
              echo "Backing up existing .env file..."
              cp /home/ubuntu/wojat/.env /home/ubuntu/wojat/.env.backup.$(date +%Y%m%d_%H%M%S)
              
              # Show environment variables that are configured (masked)
              echo "Current environment configuration:"
              grep -E "^(SUPABASE_|OPENAI_|SOLANA_|BITQUERY_|CONSUMER_|ZORO_|TELEGRAM_|DISCORD_|DB_|NODE_ENV|PORT|HOST)" /home/ubuntu/wojat/.env | sed 's/=.*/=***/' || echo "No environment variables found"
              
            else
              echo "⚠️ No .env file found at /home/ubuntu/wojat/.env"
              echo "Please create the .env file on the server with the following variables:"
              echo ""
              echo "# Wojat Platform Environment Variables"
              echo "NODE_ENV=production"
              echo "PORT=3000"
              echo "HOST=0.0.0.0"
              echo ""
              echo "# Supabase Configuration"
              echo "SUPABASE_URL=your_supabase_url_here"
              echo "SUPABASE_ANON_KEY=your_supabase_anon_key_here"
              echo "SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_here"
              echo ""
              echo "# OpenAI Configuration"
              echo "OPENAI_API_KEY=your_openai_api_key_here"
              echo ""
              echo "# Solana Configuration"
              echo "SOLANA_PRIVATE_KEY=your_base58_private_key_here"
              echo "SOLANA_PUBLIC_KEY=your_public_key_here"
              echo "SOLANA_RPC_URL=https://api.mainnet-beta.solana.com"
              echo "SOLANA_CLUSTER=mainnet-beta"
              echo ""
              echo "# Bitquery Configuration"
              echo "BITQUERY_API_KEY=your_bitquery_api_key_here"
              echo "ACCESS_TOKEN=your_bitquery_access_token_here"
              echo ""
              echo "# Twitter Configuration"
              echo "CONSUMER_KEY=your_twitter_consumer_key_here"
              echo "CONSUMER_SECRET=your_twitter_consumer_secret_here"
              echo "ZORO_ACCESS_TOKEN=your_twitter_access_token_here"
              echo "ZORO_ACCESS_TOKEN_SECRET=your_twitter_access_token_secret_here"
              echo ""
              echo "# Telegram Configuration"
              echo "TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here"
              echo "TELEGRAM_CHANNEL_ID=your_telegram_channel_id_here"
              echo "TELEGRAM_GROUP_ID=your_telegram_group_id_here"
              echo ""
              echo "# Discord Configuration"
              echo "DISCORD_BOT_TOKEN=your_discord_bot_token_here"
              echo "DISCORD_GUILD_ID=your_discord_guild_id_here"
              echo "DISCORD_ANNOUNCEMENT_CHANNEL_ID=your_announcement_channel_id_here"
              echo "DISCORD_TRADING_CHANNEL_ID=your_trading_channel_id_here"
              echo "DISCORD_VOICE_CHANNEL_ID=your_voice_channel_id_here"
              echo ""
              echo "# Database Configuration"
              echo "DATABASE_URL=postgresql://username:password@localhost:5432/wojat_db"
              echo "DB_HOST=localhost"
              echo "DB_PORT=5432"
              echo "DB_NAME=wojat_db"
              echo "DB_USER=wojat_user"
              echo "DB_PASSWORD=your_db_password_here"
              echo ""
              echo "# Server Information"
              echo "SERVER_PUBLIC_IP=$PUBLIC_IP"
              echo ""
              echo "Creating empty .env file for you to fill in..."
              touch /home/ubuntu/wojat/.env
            fi
            
            # Test if Supabase connection is configured
            echo "Testing Supabase connection configuration..."
            if grep -q "SUPABASE_URL=" /home/ubuntu/wojat/.env && grep -q "SUPABASE_ANON_KEY=" /home/ubuntu/wojat/.env; then
              echo "✅ Supabase configuration found in .env file"
              SUPABASE_URL=$(grep "SUPABASE_URL=" /home/ubuntu/wojat/.env | cut -d'=' -f2)
              echo "Supabase URL: $SUPABASE_URL"
            else
              echo "⚠️ Supabase configuration not found in .env file"
              echo "Please ensure SUPABASE_URL and SUPABASE_ANON_KEY are set in your server .env file"
            fi
            
            # Stop and remove existing containers
            echo "Stopping existing Wojat containers..."
            sudo docker stop wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper || true
            sudo docker rm wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper || true
            
            # Pull latest images
            echo "Pulling latest Wojat images..."
            sudo docker pull ${{ env.DOCKER_USERNAME }}/wojat-frontend:latest
            sudo docker pull ${{ env.DOCKER_USERNAME }}/wojat-elizaos-agents:latest
            sudo docker pull ${{ env.DOCKER_USERNAME }}/wojat-bitquery:latest
            sudo docker pull ${{ env.DOCKER_USERNAME }}/wojat-js-scraper:latest
            
            # Create Docker network for Wojat services
            echo "Creating Wojat Docker network..."
            sudo docker network create wojat-network || true
            
            # Run Frontend container
            echo "Starting Wojat Frontend container..."
            sudo docker run -d \
              --name wojat-frontend \
              --network wojat-network \
              --restart unless-stopped \
              -p 3000:3000 \
              -v /home/ubuntu/wojat/.env:/app/.env:ro \
              ${{ env.DOCKER_USERNAME }}/wojat-frontend:latest
            
            # Run ElizaOS Agents container
            echo "Starting Wojat ElizaOS Agents container..."
            sudo docker run -d \
              --name wojat-elizaos-agents \
              --network wojat-network \
              --restart unless-stopped \
              -p 3001:3001 \
              -v /home/ubuntu/wojat/.env:/app/.env:ro \
              ${{ env.DOCKER_USERNAME }}/wojat-elizaos-agents:latest
            
            # Run Bitquery Service container
            echo "Starting Wojat Bitquery Service container..."
            sudo docker run -d \
              --name wojat-bitquery \
              --network wojat-network \
              --restart unless-stopped \
              -p 3002:3002 \
              -v /home/ubuntu/wojat/.env:/app/.env:ro \
              ${{ env.DOCKER_USERNAME }}/wojat-bitquery:latest
            
            # Run JS Scraper container
            echo "Starting Wojat JS Scraper container..."
            sudo docker run -d \
              --name wojat-js-scraper \
              --network wojat-network \
              --restart unless-stopped \
              -p 3003:3003 \
              -v /home/ubuntu/wojat/.env:/app/.env:ro \
              ${{ env.DOCKER_USERNAME }}/wojat-js-scraper:latest
            
            # Verify deployment
            echo "Verifying Wojat Platform deployment..."
            sleep 15
            
            # Check all containers
            echo "Container Status:"
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Test database connection from within containers
            echo "Testing Supabase database connections from containers..."
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              if sudo docker exec $container timeout 10 bash -c "curl -s -o /dev/null -w '%{http_code}' \$SUPABASE_URL/rest/v1/" 2>/dev/null | grep -q "200\|401"; then
                echo "✅ $container can reach Supabase API"
              else
                echo "⚠️ $container cannot reach Supabase API"
              fi
            done
            
            # Check container logs for any errors
            echo "Checking container logs for errors..."
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              if sudo docker ps | grep -q $container; then
                echo "=== $container logs (last 10 lines) ==="
                sudo docker logs --tail 10 $container
                echo ""
              else
                echo "❌ $container is not running"
                echo "Error logs:"
                sudo docker logs $container
              fi
            done
            
            echo "Wojat Platform deployment completed at $(date '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        if: success()
        with:
          host: ${{ env.HOST }}
          username: ${{ env.HOST_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Wojat Platform Deployment Verification ==="
            
            # Check all container status
            echo "Container Status:"
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Check container details
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              if sudo docker ps | grep -q $container; then
                echo "=== $container Details ==="
                sudo docker inspect $container --format='Status: {{.State.Status}} | Started At: {{.State.StartedAt}}'
                echo "Port Mapping:"
                sudo docker port $container
                echo ""
              else
                echo "❌ $container is not running"
                exit 1
              fi
            done
            
            # Verify environment files are mounted
            echo "=== Environment File Verification ==="
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              echo "Checking $container environment file:"
              sudo docker exec $container ls -la /app/.env || echo "Environment file not found in $container!"
            done
            
            # Show environment configuration (masked)
            echo "=== Environment Configuration ==="
            sudo docker exec wojat-frontend grep -E "^(SUPABASE_|OPENAI_|SOLANA_|BITQUERY_|CONSUMER_|ZORO_|TELEGRAM_|DISCORD_|DB_|NODE_ENV|PORT|HOST)" /app/.env | sed 's/=.*/=***/' || echo "No environment config found"
            
            # Final health checks
            echo "=== Final Health Checks ==="
            sleep 5
            
            # Check if services are responding
            echo "Testing service endpoints:"
            curl -s -o /dev/null -w "Frontend (port 3000): %{http_code}\n" http://localhost:3000 || echo "Frontend: Not responding"
            curl -s -o /dev/null -w "ElizaOS Agents (port 3001): %{http_code}\n" http://localhost:3001 || echo "ElizaOS Agents: Not responding"
            curl -s -o /dev/null -w "Bitquery Service (port 3002): %{http_code}\n" http://localhost:3002 || echo "Bitquery Service: Not responding"
            curl -s -o /dev/null -w "JS Scraper (port 3003): %{http_code}\n" http://localhost:3003 || echo "JS Scraper: Not responding"
            
            # Test Supabase connectivity from containers
            echo "Testing Supabase connectivity from containers:"
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              echo "Testing $container Supabase connectivity..."
              sudo docker exec $container timeout 5 bash -c "curl -s -o /dev/null -w 'Supabase API: %{http_code}\n' \$SUPABASE_URL/rest/v1/" 2>/dev/null || echo "$container: Supabase API test failed"
            done
            
            # Check for Supabase-related errors in logs
            echo "Checking for Supabase-related errors in container logs:"
            for container in wojat-frontend wojat-elizaos-agents wojat-bitquery wojat-js-scraper; do
              echo "=== $container logs (Supabase-related) ==="
              sudo docker logs --tail 10 $container | grep -i "supabase\|database\|connection\|error" || echo "No Supabase-related messages in recent logs"
            done
            
            echo ""
            echo "=== Wojat Platform Deployment Verification Complete ==="
            echo "🌐 Frontend accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3000"
            echo "🤖 ElizaOS Agents accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3001"
            echo "📊 Bitquery Service accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3002"
            echo "🔍 JS Scraper accessible at: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3003"
